const DATA_BASE_ROOT = "http://localhost:3000";
const ADMINS_END_POINT = `${DATA_BASE_ROOT}/admins`;
const BRANDS_END_POINT = `${DATA_BASE_ROOT}/brands`;
const PQRS_END_POINT = `${DATA_BASE_ROOT}/pqrs`;

class ModelBuilder {
  constructor (userEndpoint) {
    this.endpoint = userEndpoint;
  }

  async getAllData () {
    const fetchURL = this.endpoint;
    const req = await fetch(fetchURL);
    const data = await req.json()
    return data
  }

  async getByKeyValue (userKey, userValue) {
    const fetchURL = `${this.endpoint}/?${userKey}=${userValue}`
    const req = await fetch(fetchURL);
    const data = await req.json()
    return data
  }
  
  async post (userDataSchema) {
    const fetchURL = this.endpoint;
    const fetchHeaders = {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json;charset=utf-8'
      },
      body: JSON.stringify(userDataSchema)
    };
    const req = await fetch(fetchURL, fetchHeaders);
    const data = await req.json()
    return data
  }

  async delete (userID) {
    const fetchURL = `${this.endpoint}/${userID}`;
    const fetchHeaders = {
      method: 'DELETE'
    };
    const req = await fetch(fetchURL, fetchHeaders);
    const data = await req.json()
    return data
  }

  async updateData (userID, userDataSchema) {
    const fetchURL = `${this.endpoint}/${userID}`;
    const fetchHeaders = {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json;charset=utf-8'
      },
      body: JSON.stringify(userDataSchema)
    };
    const req = await fetch(fetchURL, fetchHeaders);
    const data = await req.json()
    return data
  }
}

class AdminDataModel extends ModelBuilder {
  constructor () {
    super(ADMINS_END_POINT);
  }

  async getAdminByEmail (userEmail) {
    const data = super.getByKeyValue("email", userEmail);
    return data;
  }

  async post (userName, userEmail) {
    const dataSchema = {
      name: userName,
      email: userEmail,
      password: "password" // "AutoGenerated"
    };
    const data = await super.post(dataSchema);
    return data;
  }
}

class BrandDataModel extends ModelBuilder {
  constructor () {
    super(BRANDS_END_POINT);
  }

  async getBrandByName (userBrandName) {
    const data = super.getByKeyValue("name", userBrandName);
    return data;
  }

  async post (userBrandData) {
    const {name, local, floor, schedule, logoURL, website, description} = userBrandData;
    const dataSchema = {
      name,
      local,
      floor,
      schedule,
      logoURL,
      website,
      description
    };
    const data = await super.post(dataSchema);
    return data;
  }
}

class PqrsDataModel extends ModelBuilder {
  constructor () {
    super(PQRS_END_POINT);
  }

  async post (userType, userEmail, userMessage) {
    const dataSchema = {
      type: userType,
      email: userEmail,
      message: userMessage,
    };
    const data = await super.post(dataSchema);
    return data;
  }
}
const adminData = {
  name: "emanuel",
  local: "210",
  floor: "2",
  schedule: `lunes - sabado: 10:00 a.m - 6:00 p.m
  domingos y festivos: 10:00 a.m - 6:00 p.m`,
  logoURL: "https://i.ibb.co/pbRzhM6/logo-hacienda.jpg",
  website: "mySitio.com",
  description: "lorem lorem lorem"
}

const myModel = new BrandDataModel() 
// myModel.post(adminData)
const data = myModel.post(adminData)
console.log(data)
// myModel.delete("5e2a")
// myModel.updateData("6e46", adminData)
